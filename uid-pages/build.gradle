def parentProject = project
subprojects { subProject ->
    if (file("cypress.json").exists()){
        apply plugin: 'com.github.node-gradle.node'

        node {
            download = true
            version = Versions.nodeVersion
            npmVersion = Versions.npmVersion
        }

        task unzip(type: Copy) {
            dependsOn('buildUIDPage')
            def zipFile = file("${buildDir}/${project.name}-${project.version}.zip")
            def outputDir = file("build/dist")

            from zipTree(zipFile)
            into outputDir
        }

        subProject.task([dependsOn: [unzip, subProject.tasks.npm_install], type: NpmTask],"openTest") {
            workingDir = parentProject.projectDir
            args = ['run', 'open', '--', '--project', subProject.name]
            group 'ui designer'
        }

        subProject.task([dependsOn: [unzip, subProject.tasks.npm_install], type: NpmTask],"runTestChrome") {
            workingDir = parentProject.projectDir
            args = ['test', '--', '--project', subProject.name, '--browser', 'chrome', '--headless']
            group 'Bonita'
            outputs.cacheIf {true}
            inputs.files('cypress.json')
            inputs.dir('src')
            inputs.dir('step_definitions')
            inputs.dir('test')
            outputs.dir('build/tests/results')
        }
    }

    apply plugin: 'com.bonitasoft.gradle.bonita-uid-page'
    apply plugin: 'com.bonitasoft.gradle.bonita-uid-page-crowdin'

    def pageArchiveFile = layout.buildDirectory.file("${project.name}-${project.version}.zip")
    def pagetArtifact = artifacts.add('archives', pageArchiveFile.get().asFile) {
        type 'zip'
        builtBy 'buildUIDPage'
    }
    
    publishing {
        publications {
            maven(MavenPublication) {
                artifact pagetArtifact
                artifact (sourceUIDPage) {
                    classifier "sources"
                    extension "zip"
                }
            }
        }
    }

}

{
  "designerVersion" : "1.5.10",
  "id" : "customLayoutMenuBonitaV2",
  "name" : "BonitaLayoutMenuV2",
  "lastUpdate" : 1560520669514,
  "template" : [
	"<div class=\"navbar navbar-inverse\" role=\"navigation\">",    
	"	<div class=\"container-fluid\">",        
	"		<div class=\"navbar-header\">",            
	"			<a class=\"navbar-brand visible-xs\" ng-click=\"ctrl.displayPage(properties.homePageToken)\" href=\"../{{properties.homePageToken}}/\">{{ctrl.applicationName}}</a>",            
	"			<button type=\"button\" ng-init=\"navCollapsed = true\" ng-click=\"navCollapsed = !navCollapsed\" class=\"navbar-toggle\">",                
	"				<span class=\"icon-bar\"></span>",                
	"				<span class=\"icon-bar\"></span>",                
	"				<span class=\"icon-bar\"></span>",            
	"			</button>",        
	"		</div>",        
	"		<div collapse=\"navCollapsed\" class=\"collapse navbar-responsive-collapse navbar-collapse\">",            
	"			<ul class=\"nav navbar-nav\">",                
	"				<li ng-class=\"{active:ctrl.pageToken===menu.applicationPageId.token}\" ng-repeat=\"menu in ctrl.filterChildren(-1)\" dropdown>",                    
	"					<a ng-if=\"!ctrl.isParentMenu(menu)\" ng-click=\"ctrl.displayPage(menu.applicationPageId.token)\" href=\"../{{menu.applicationPageId.token}}/\">
	"						<span class=\"maxTitleWidth\">{{menu.displayName}}</span>
	"					</a>",                    
	"					<a ng-if=\"ctrl.isParentMenu(menu)\" href=\"javascript:void(0);\" dropdown-toggle>{{menu.displayName}}
	"						<span class=\"caret\"></span>
	"					</a>",                    
	"					<ul ng-if=\"ctrl.isParentMenu(menu)\"  class=\"dropdown-menu\">",                        
	"						<li ng-repeat=\"childMenu in ctrl.filterChildren(menu.id)\">",                            
	"							<a ng-click=\"ctrl.displayPage(childMenu.applicationPageId.token)\" href=\"../{{childMenu.applicationPageId.token}}/\">{{childMenu.displayName}}</a>",                        
	"						</li>",                    
	"					</ul>",                
	"				</li>",            
	"			</ul>",            
	"			<ul class=\"nav navbar-nav visible-xs\">",                
	"				<hr ng-show=\"ctrl.applicationMenuList.length>0\"/>",                
	"				<li>",
	"					<a ng-click=\"ctrl.openCurrentSessionModal()\">",
	"						<span class=\"max-title-width\">{{properties.userName}}</span>",
	"					</a>",
	"				</li>",                
	"				<li>",
	"					<a ng-click=\"ctrl.openAppSelectionModal()\">",
	"						<span class=\"glyphicon glyphicon-th\"></span>",
	"					</a>",
	"				</li>",            
	"			</ul>",        
	"		</div>",    
	"	</div>",
	"</div>"
  ],
  "controller" : [
	"function WidgetlivingApplicationMenuController($scope, $http, $window, $location, $timeout, modalService) {",
	"	var ctrl = this;",
	"	ctrl.filterChildren = function(parentId) {",
	"	return (ctrl.applicationMenuList || []).filter(function(menu) {	",
	"	return menu.parentMenuId === '' + parentId;",
	"	  });",
	"	};",
	"	ctrl.isParentMenu = function(menu) {",
	"	return menu.parentMenuId == -1 && menu.applicationPageId == -1;",
	"	};", 
	"	ctrl.displayPage = function(token) {",
	"	var previousToken = ctrl.pageToken;",
	"	var previousPath = window.location.pathname;", 
	"	ctrl.pageToken = token;",
	"	var urlPath = previousPath.substring(0, previousPath.length - previousToken.length - 1) + token + '/' + $window.location.search;",
	"	var stateObject = {",
	"	title: \ "\" + token + \"\", url: \"\" +  urlPath  + \"\"};",        
	"	if (typeof ($window.history.pushState) != \"undefined\") {",            
	"	$window.history.pushState(stateObject, stateObject.title, stateObject.url );",        
	"	} else {",            
	"	alert(\"Browser does not support HTML5.\");",        
	"	}",        
	"	//make sure the user is still logged in before refreshing the iframe",        
	"	verifySession().then(setTargetedUrl, refreshPage);",          
	"	return false;",    
	"	};",       
	"	ctrl.openCurrentSessionModal = function() {",        
	"	modalService.open($scope.properties.currentSessionModalId);",    
	"	};",        
	"	ctrl.openAppSelectionModal = function() {",        
	"	modalService.open($scope.properties.appSelectionModalId);",    
	"	};",   
	"	//handle the browser back button",    
	"	$window.addEventListener('popstate', function(e) {",        
	"	parseCurrentURL();",        
	"	//make sure the user is still logged in before refreshing the iframe",        
	"	setTargetedUrl();",        
	"	refreshPage();",    
	"	});",    
	"	function parseCurrentURL() {",        
	"	var pathArray = $window.location.pathname.split( '/' );",        
	"	ctrl.applicationToken = pathArray[pathArray.length-3];",        
	"	ctrl.pageToken = pathArray[pathArray.length-2];",    
	"	}",      
	"	function setApplicationMenuList(application) {",        
	"	return $http.get('../API/living/application-menu/?c=100&f=applicationId%3D'+application.id+'&d=applicationPageId&o=menuIndex+ASC')",            
	"	.success(function(data) {",                
	"	ctrl.applicationMenuList = data;",            
	"	});",    
	"	}",    
	"	function searchSeparator() {",        
	"	return $window.location.search ? \"&\" : \"?\";",    
	"	}",    
	"	function setTargetedUrl() {",      
	"	// angular hack to force the variable bound to refresh",      
	"	// so we change it's value to undefined and then delay to the correct value",      
	"	$scope.properties.targetUrl = undefined;",        
	"	$timeout(function(){",            
	"	$scope.properties.targetUrl = \"../../../portal/resource/app/\"+ctrl.applicationToken+\"/\"+ ctrl.pageToken+\"/content/\"+ $window.location.search + searchSeparator() + \"app=\" + ctrl.applicationToken;",        
	"	}, 0);",    
	"	}",        
	"	function refreshPage() {",        
	"	$window.location.reload();",    
	"	}",    
	"	function verifySession() {",        
	"	var userIdentity = '../API/identity/user/' +  $scope.properties.userId;",        
	"	return $http.get(userIdentity);",    
	"	}",        
	"	function setApplication(){",        
	"	var application = $scope.properties.application;",        
	"	ctrl.applicationToken = application.token;",        
	"	ctrl.pageToken = $scope.properties.pageToken;",        
	"	ctrl.applicationName = $scope.properties.application.displayName;",        
	"	setApplicationMenuList(application);",        
	"	setTargetedUrl();",    
	"	}",        
	"	setApplication();",
	"}"
 ],
  "description" : "This is the default bonita portal menu.",
  "custom" : true,
  "properties" : [ {
    "label" : "URL targeted by the menu",
    "name" : "targetUrl",
    "type" : "text",
    "bond" : "variable"
  }, {
    "label" : "Username",
    "name" : "userName",
    "type" : "text",
    "bond" : "expression"
  }, {
    "label" : "Current session modal Id",
    "name" : "currentSessionModalId",
    "type" : "text",
    "bond" : "interpolation"
  }, {
    "label" : "App selection modal Id",
    "name" : "appSelectionModalId",
    "type" : "text",
    "bond" : "constant"
  }, {
    "label" : "Application",
    "name" : "application",
    "type" : "text",
    "bond" : "expression"
  }, {
    "label" : "Page token",
    "name" : "pageToken",
    "type" : "text",
    "bond" : "expression"
  }, {
    "label" : "User id",
    "name" : "userId",
    "type" : "text",
    "bond" : "expression"
  }, {
    "label" : "Home page token",
    "name" : "homePageToken",
    "type" : "text",
    "bond" : "expression"
  } ],
  "assets" : [ {
    "id" : "b566d5f3-6ee0-4874-a0c6-a3ab37504f7c",
    "name" : "ui-bootstrap-tpls-0.13.0.min.js",
    "type" : "js",
    "order" : 1,
    "external" : false
  }, {
    "id" : "44cb1989-1338-4d4c-9160-bb311e7dff6c",
    "name" : "config-html5.js",
    "type" : "js",
    "order" : 2,
    "external" : false
  }, {
    "id" : "6e0f00f6-66ff-41ca-b85f-3b205a037557",
    "name" : "style.css",
    "type" : "css",
    "order" : 3,
    "external" : false
  } ],
  "requiredModules" : [ "ui.bootstrap" ],
  "authRules" : [ "GET|living/application", "GET|living/application-menu", "GET|living/application-page" ],
  "type" : "widget",
  "hasHelp" : false
}
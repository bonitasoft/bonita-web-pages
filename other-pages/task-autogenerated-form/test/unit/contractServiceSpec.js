'use strict';

describe('Step Autogenerated Form test', function () {

  var $httpBackend, contractSrvc;

  beforeEach(module('autogeneratedForm'));


  beforeEach(function () {

    inject(function ($injector) {
      // Set up the mock http service responses
      $httpBackend = $injector.get('$httpBackend');
      contractSrvc = $injector.get('contractSrvc');

    });
  });

  afterEach(function () {
    $httpBackend.verifyNoOutstandingExpectation();
    $httpBackend.verifyNoOutstandingRequest();
  });

  it('should declare a fetchContract function', function () {

    expect(contractSrvc.fetchContract).toBeTruthy();
  });

  it('should return a contract', function () {

    var contract = {
      "constraints":[
        {
          "name":"ticket_comment",
          "expression":"ticket_comment!=null && !ticket_comment.toString().isEmpty()",
          "explanation":"input ticket_comment is mandatory",
          "inputNames":[
            "ticket_comment"
          ],
          "constraintType":"MANDATORY"
        }
      ],
      "complexInputs":[     ],
      "simpleInputs":[
        {
          "description":null,
          "name":"ticket_comment",
          "multiple":false,
          "type":"TEXT"
        }
      ]
    };
    var response;

    $httpBackend.expect('GET', '../API/bpm/userTask/' + 2 + '/contract')
      .respond(contract);
    contractSrvc.fetchContract(2).then(function (fetchedData) {
      response = fetchedData.data;
    });
    $httpBackend.flush();
    expect(response).toEqual(contract);
  });

    it('should execute a task', function() {
        $httpBackend.expectPOST('../API/bpm/userTask/2/execution', {'some': 'data'}).respond(200);

        contractSrvc.executeTask('2', '', {'some': 'data'});

        $httpBackend.flush();
    });

    it('should execute a task on the behalf of another user', function() {
        $httpBackend.expectPOST('../API/bpm/userTask/2/execution?user=4', {'some': 'data'}).respond(200);

        contractSrvc.executeTask('2', '4', {'some': 'data'});

        $httpBackend.flush();
    });

});

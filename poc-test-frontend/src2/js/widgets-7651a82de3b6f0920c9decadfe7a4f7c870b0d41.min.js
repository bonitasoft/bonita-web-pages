
(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbButton',function(){return{controllerAs:'ctrl',controller:function PbButtonCtrl($scope,$http,$location,$log,$window,localStorageService){'use strict';var vm=this;this.action=function action(){if($scope.properties.action==='Remove from collection'){removeFromCollection();}else if($scope.properties.action==='Add to collection'){addToCollection();}else if($scope.properties.action==='Start process'){startProcess();}else if($scope.properties.action==='Submit task'){submitTask();}else if($scope.properties.url){doRequest($scope.properties.action,$scope.properties.url);}};function removeFromCollection(){if($scope.properties.collectionToModify){if(!Array.isArray($scope.properties.collectionToModify)){throw'Collection property for widget button should be an array, but was '+$scope.properties.collectionToModify;}
var index=-1;if($scope.properties.collectionPosition==='First'){index=0;}else if($scope.properties.collectionPosition==='Last'){index=$scope.properties.collectionToModify.length-1;}else if($scope.properties.collectionPosition==='Item'){index=$scope.properties.collectionToModify.indexOf($scope.properties.removeItem);}
if(index!==-1){$scope.properties.collectionToModify.splice(index,1);}}}
function addToCollection(){if(!$scope.properties.collectionToModify){$scope.properties.collectionToModify=[];}
if(!Array.isArray($scope.properties.collectionToModify)){throw'Collection property for widget button should be an array, but was '+$scope.properties.collectionToModify;}
var item=angular.copy($scope.properties.valueToAdd);if($scope.properties.collectionPosition==='First'){$scope.properties.collectionToModify.unshift(item);}else{$scope.properties.collectionToModify.push(item);}}
function startProcess(){var id=getUrlParam('id');if(id){var prom=doRequest('POST','../API/bpm/process/'+id+'/instantiation',getUserParam()).then(function(){localStorageService.delete($window.location.href);});}else{$log.log('Impossible to retrieve the process definition id value from the URL');}}
function doRequest(method,url,params){vm.busy=true;var req={method:method,url:url,data:angular.copy($scope.properties.dataToSend),params:params};return $http(req).success(function(data,status){$scope.properties.dataFromSuccess=data;notifyParentFrame({message:'success',status:status,dataFromSuccess:data});if($scope.properties.targetUrlOnSuccess&&method!=='GET'){redirectIfNeeded();}}).error(function(data,status){$scope.properties.dataFromError=data;notifyParentFrame({message:'error',status:status,dataFromError:data});}).finally(function(){vm.busy=false;});}
function redirectIfNeeded(){var iframeId=$window.frameElement?$window.frameElement.id:null;if(!iframeId||iframeId&&iframeId.indexOf('bonitaframe')!==0){$window.location.assign($scope.properties.targetUrlOnSuccess);}}
function notifyParentFrame(additionalProperties){if($window.parent!==$window.self){var dataToSend=angular.extend({},$scope.properties,additionalProperties);$window.parent.postMessage(JSON.stringify(dataToSend),'*');}}
function getUserParam(){var userId=getUrlParam('user');if(userId){return{'user':userId};}
return{};}
function getUrlParam(param){var paramValue=$location.absUrl().match('[//?&]'+param+'=([^&#]*)($|[&#])');if(paramValue){return paramValue[1];}
return'';}
function submitTask(){var id;id=getUrlParam('id');if(id){doRequest('POST','../API/bpm/userTask/'+getUrlParam('id')+'/execution',getUserParam()).then(function(){localStorageService.delete($window.location.href);});}else{$log.log('Impossible to retrieve the task id value from the URL');}}},template:'<div class="text-{{ properties.alignment }}">\n    <button\n        ng-class="\'btn btn-\' + properties.buttonStyle"\n        ng-click="ctrl.action()"\n        type="button"\n        ng-disabled="properties.disabled || ctrl.busy" ng-bind-html="properties.label | uiTranslate"></button>\n</div>\n'};});(function(){try{return angular.module('bonitasoft.ui.widgets');}catch(e){return angular.module('bonitasoft.ui.widgets',[]);}})().directive('pbTextarea',function(){return{controllerAs:'ctrl',controller:function PbTextAreaCtrl($scope,$log,widgetNameFactory){'use strict';this.name=widgetNameFactory.getName('pbTextArea');if(!$scope.properties.isBound('value')){$log.error('the pbTextArea property named "value" need to be bound to a variable');}},template:'<div ng-class="{\n    \'form-horizontal\': properties.labelPosition === \'left\' && !properties.labelHidden,\n    \'row\': properties.labelPosition === \'top\' && !properties.labelHidden || properties.labelHidden\n    }">\n    <div class="form-group">\n        <label\n            ng-if="!properties.labelHidden"\n            ng-class="{ \'control-label--required\': properties.required }"\n            class="control-label col-xs-{{ !properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 12 }}">\n            {{ properties.label | uiTranslate }}\n        </label>\n        <div class="col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === \'left\' ? properties.labelWidth : 0) }}">\n            <textarea class="form-control"\n                name="{{ctrl.name}}"\n                ng-model="properties.value"\n                ng-model-options="{ allowInvalid: true }"\n                ng-required="properties.required"\n                ng-minlength="properties.minLength"\n                ng-maxlength="properties.maxLength"\n                ng-readonly="properties.readOnly">\n            </textarea>\n            <div ng-messages="$form[ctrl.name].$dirty && $form[ctrl.name].$error " ng-messages-include="forms-generic-errors.html" role="alert"></div>\n        </div>\n    </div>\n</div>\n'};});
{
  "designerVersion" : "1.8.6",
  "id" : "pbInput",
  "name" : "Input",
  "lastUpdate" : 1533653604808,
  "template" : "<div ng-class=\"{\n    'form-horizontal': properties.labelPosition === 'left' && !properties.labelHidden,\n    'row': properties.labelPosition === 'top' && !properties.labelHidden || properties.labelHidden\n    }\">\n    <div class=\"form-group\">\n        <label\n            ng-if=\"!properties.labelHidden\"\n            ng-class=\"{ 'control-label--required': properties.required }\"\n            class=\"control-label col-xs-{{ !properties.labelHidden && properties.labelPosition === 'left' ? properties.labelWidth : 12 }}\" ng-bind-html=\"properties.label | uiTranslate\">\n        </label>\n        <div class=\"col-xs-{{ 12 - (!properties.labelHidden && properties.labelPosition === 'left' ? properties.labelWidth : 0) }}\">\n            <input\n                type=\"{{properties.type}}\"\n                class=\"form-control\"\n                placeholder=\"{{ properties.placeholder | uiTranslate }}\"\n                ng-model=\"properties.value\"\n                ng-model-options=\"{ allowInvalid: true }\"\n                name=\"{{ctrl.name}}\"\n                ng-required=\"properties.required\"\n                ng-minlength=\"properties.minLength\"\n                ng-maxlength=\"properties.maxLength\"\n                min=\"{{properties.min}}\"\n                max=\"{{properties.max}}\"\n                step=\"{{properties.step}}\"\n                ng-readonly=\"properties.readOnly\">\n            <div ng-messages=\"$form[ctrl.name].$dirty && $form[ctrl.name].$error \" ng-messages-include=\"forms-generic-errors.html\" role=\"alert\"></div>\n        </div>\n    </div>\n</div>\n",
  "icon" : "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 20'><g><path fill='#fff' d='M1,19V1h48v18H1z M0,0v20h50V0H0z M6,18v-1H5v1H6z M8,17H7v1h1V17z M7,2v1h1V2H7z M5,3h1V2H5V3z M6,3v14h1 V3H6z '/></g></svg>",
  "controller" : "function PbInputCtrl($scope, $log, widgetNameFactory) {\n\n  'use strict';\n\n  this.name = widgetNameFactory.getName('pbInput');\n\n  if (!$scope.properties.isBound('value')) {\n    $log.error('the pbInput property named \"value\" need to be bound to a variable');\n  }\n}\n",
  "description" : "Field where the user can enter information",
  "custom" : false,
  "order" : 1,
  "properties" : [ {
    "label" : "Required",
    "name" : "required",
    "help" : "In the context of a form container, use $form.$invalid as a Boolean to check form validity in a widget property",
    "type" : "boolean",
    "defaultValue" : false,
    "bond" : "expression"
  }, {
    "label" : "Value min length",
    "name" : "minLength",
    "help" : "In the context of a form container, use $form.$invalid as a Boolean to check form validity in a widget property",
    "type" : "integer",
    "defaultValue" : "",
    "bond" : "expression",
    "constraints" : {
      "min" : "0"
    }
  }, {
    "label" : "Value max length",
    "name" : "maxLength",
    "help" : "In the context of a form container, use $form.$invalid as a Boolean to check form validity in a widget property",
    "type" : "integer",
    "defaultValue" : "",
    "bond" : "expression",
    "constraints" : {
      "min" : "1"
    }
  }, {
    "label" : "Read-only",
    "name" : "readOnly",
    "type" : "boolean",
    "defaultValue" : false,
    "bond" : "expression"
  }, {
    "label" : "Label hidden",
    "name" : "labelHidden",
    "type" : "boolean",
    "defaultValue" : false,
    "bond" : "constant"
  }, {
    "label" : "Label",
    "name" : "label",
    "showFor" : "properties.labelHidden.value === false",
    "type" : "text",
    "defaultValue" : "Default label",
    "bond" : "interpolation"
  }, {
    "label" : "Label position",
    "name" : "labelPosition",
    "showFor" : "properties.labelHidden.value === false",
    "type" : "choice",
    "defaultValue" : "top",
    "choiceValues" : [ "left", "top" ],
    "bond" : "constant"
  }, {
    "label" : "Label width",
    "name" : "labelWidth",
    "showFor" : "properties.labelHidden.value === false",
    "type" : "integer",
    "defaultValue" : 4,
    "bond" : "constant",
    "constraints" : {
      "min" : "1",
      "max" : "12"
    }
  }, {
    "label" : "Placeholder",
    "name" : "placeholder",
    "help" : "Short hint that describes the expected value",
    "type" : "text",
    "bond" : "interpolation"
  }, {
    "label" : "Value",
    "name" : "value",
    "caption" : "Any variable: <i>myData</i> or <i>myData.attribute</i>",
    "help" : "Read-write binding, initialized or updated by users' input (bi-directional bond)",
    "type" : "text",
    "bond" : "variable"
  }, {
    "label" : "Type",
    "name" : "type",
    "help" : "In the context of a form container, use $form.$invalid as a Boolean to check form validity in a widget property",
    "type" : "choice",
    "defaultValue" : "text",
    "choiceValues" : [ "text", "number", "email", "password" ],
    "bond" : "constant"
  }, {
    "label" : "Min value",
    "name" : "min",
    "help" : "In the context of a form container, use $form.$invalid as a Boolean to check form validity in a widget property",
    "showFor" : "properties.type.value === 'number'",
    "type" : "integer",
    "bond" : "expression"
  }, {
    "label" : "Max value",
    "name" : "max",
    "help" : "In the context of a form container, use $form.$invalid as a Boolean to check form validity in a widget property",
    "showFor" : "properties.type.value === 'number'",
    "type" : "integer",
    "bond" : "expression"
  }, {
    "label" : "Step",
    "name" : "step",
    "help" : "Specifies the legal number intervals between values",
    "showFor" : "properties.type.value === 'number'",
    "type" : "integer",
    "defaultValue" : 1,
    "bond" : "expression"
  } ],
  "assets" : [ ],
  "requiredModules" : [ ],
  "type" : "widget",
  "hasHelp" : false
}